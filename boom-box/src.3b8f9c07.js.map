{"version":3,"sources":["libs/cell.js","libs/column.js","libs/board.js","index.js"],"names":["Cell","position","color","_readyToBoom","createElm","updatePosition","col","row","elm","style","setProperty","document","createElement","className","backgroundColor","setAttribute","classList","add","setTimeout","remove","state","Column","cells","cell","unshift","filter","readyToBoom","destroy","cellIndex","colors","R","G","B","O","Board","boardElm","scoreElm","msgElm","initColumnsCount","initRowsCount","gameOverRow","rowsCount","columns","currentColor","score","readyToBoomCounter","innerText","initializeCells","renderBoard","updateCellsPositions","colIndex","newRow","generateNewRowColors","rowIndex","addCell","push","innerHTML","boardHeight","Math","floor","window","innerHeight","dimension","width","height","length","column","getCell","addEventListener","cellClick","bind","append","appendChild","showScore","forEach","map","gameover","clearBoard","Array","fill","_","rnd","random","c","target","isSingleCell","markRoundCell","removeMarkedRoundCells","calcScore","addNewCellsToColumns","renderNewCells","findSibling","top","bottom","left","right","findCell","boomCells","playFxSounds","chance","Audio","boomSound1","boomSound2","play","scoreRate","newCell","start","getElementById","board"],"mappings":"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","file":"src.3b8f9c07.js","sourceRoot":"..\\src","sourcesContent":["export default class Cell {\r\n    constructor(position, color) {\r\n        this.color = color\r\n        this._readyToBoom = false\r\n\r\n        this.createElm()\r\n\r\n        this.updatePosition({col: position.col, row: position.row})\r\n    }\r\n\r\n    set readyToBoom(state) {\r\n        this._readyToBoom = state\r\n    }\r\n\r\n    get readyToBoom() {\r\n        return this._readyToBoom\r\n    }\r\n\r\n    updatePosition({col, row}) {\r\n        if (col !== void 0) this.col = col;\r\n        if (row !== void 0) this.row = row;\r\n\r\n        this.elm.style.setProperty(\"--col\", col)\r\n        this.elm.style.setProperty(\"--row\", row)\r\n    }\r\n\r\n    createElm() {\r\n        this.elm = document.createElement(\"button\")\r\n        this.elm.className = \"cell\"\r\n        this.elm.style.backgroundColor = this.color\r\n        this.elm.setAttribute(\"data-pos\", `${this.col}-${this.row}`)\r\n    }\r\n\r\n    destroy() {\r\n        this.elm.classList.add(\"boom\")\r\n        setTimeout(() => {\r\n            this.elm.remove()\r\n        }, 200)\r\n    }\r\n}\r\n","export default class Column {\r\n    constructor() {\r\n        this.cells = []\r\n\r\n        this.createElm()\r\n    }\r\n\r\n    createElm() {\r\n        this.elm = document.createElement(\"div\")\r\n        this.elm.className = \"column\"\r\n    }\r\n\r\n    addCell(cell) {\r\n        this.cells.unshift(cell)\r\n    }\r\n\r\n    boomCells() {\r\n        this.cells = this.cells.filter(cell => {\r\n            if (cell.readyToBoom)\r\n                cell.destroy()\r\n            return !cell.readyToBoom\r\n        })\r\n    }\r\n\r\n    getCell(cellIndex) {\r\n        return this.cells[cellIndex]\r\n    }\r\n\r\n    destroy() {\r\n        this.elm.remove()\r\n    }\r\n}\r\n","import Cell from \"./cell\"\r\nimport Column from \"./column\"\r\nimport boomSound1 from \"../sounds/fx-1.mp3\"\r\nimport boomSound2 from \"../sounds/fx-2.mp3\"\r\n\r\nconst colors = {R: \"#e74c3c\", G: \"#27ae60\", B: \"#3498db\", O: \"#f39c12\"}\r\n\r\nexport default class Board {\r\n    constructor(boardElm, scoreElm, msgElm) {\r\n        this.boardElm = boardElm\r\n        this.scoreElm = scoreElm\r\n        this.msgElm = msgElm\r\n        this.initColumnsCount = 8\r\n        this.initRowsCount = 4\r\n        this.gameOverRow = 13\r\n        this.rowsCount = 0\r\n        this.columns = []\r\n        this.currentColor = null\r\n        this.score = 0\r\n        this.readyToBoomCounter = 0;\r\n\r\n    }\r\n\r\n    start() {\r\n        this.msgElm.innerText = ''\r\n        this.initializeCells()\r\n        this.renderBoard()\r\n        this.updateCellsPositions()\r\n    }\r\n\r\n    initializeCells() {\r\n        for (let colIndex = 0; colIndex < this.initColumnsCount; colIndex++) {\r\n            const newRow = this.generateNewRowColors();\r\n            const col = new Column();\r\n            for (let rowIndex = this.initRowsCount - 1; rowIndex >= 0; rowIndex--) {\r\n                const cell = new Cell({col: colIndex, row: rowIndex}, newRow[rowIndex])\r\n                col.addCell(cell)\r\n            }\r\n            this.columns.push(col)\r\n        }\r\n    }\r\n\r\n    renderBoard() {\r\n        this.boardElm.innerHTML = \"\"\r\n\r\n        const boardHeight = Math.floor(window.innerHeight * .7)\r\n        const dimension = Math.floor(boardHeight / this.gameOverRow)\r\n\r\n        this.boardElm.style.setProperty(\"--dimension\", dimension + \"px\")\r\n        this.boardElm.style.width = (this.initColumnsCount * (dimension * 1.1)) + \"px\"\r\n        this.boardElm.style.height = boardHeight + \"px\"\r\n\r\n\r\n        for (let colIndex = 0; colIndex < this.columns.length; colIndex++) {\r\n            const column = this.columns[colIndex]\r\n            for (let rowIndex = column.cells.length - 1; rowIndex >= 0; rowIndex--) {\r\n                const cell = column.getCell(rowIndex)\r\n                cell.elm.addEventListener(\"click\", this.cellClick.bind(this, cell))\r\n                column.elm.append(cell.elm)\r\n            }\r\n            this.boardElm.appendChild(column.elm)\r\n        }\r\n\r\n        this.showScore()\r\n    }\r\n\r\n    updateCellsPositions() {\r\n        this.rowsCount = 0\r\n\r\n        this.columns.forEach((column, colIndex) => {\r\n            column.cells.map((cell, rowIndex) => {\r\n                cell.updatePosition({col: colIndex, row: rowIndex})\r\n                return cell\r\n            })\r\n\r\n            if (column.cells.length > this.rowsCount) {\r\n                this.rowsCount = column.cells.length\r\n\r\n                if (this.rowsCount >= this.gameOverRow) {\r\n                    this.gameover = true;\r\n                    this.clearBoard()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    generateNewRowColors() {\r\n        let newRow = new Array(this.initColumnsCount).fill(\"\")\r\n        return newRow.map(_ => {\r\n            const rnd = Math.random()\r\n            let c = colors.B\r\n            if (rnd > 0.9)\r\n                c = colors.G\r\n            else if (rnd > .6)\r\n                c = colors.G\r\n            else if (rnd > .4)\r\n                c = colors.R\r\n            return c\r\n        })\r\n    }\r\n\r\n    cellClick(target) {\r\n        if (this.gameover || !target || target.readyToBoom) return;\r\n\r\n        if (this.isSingleCell(target)) return;\r\n\r\n        this.currentColor = target.color\r\n\r\n        this.markRoundCell(target)\r\n\r\n        this.removeMarkedRoundCells()\r\n\r\n        this.calcScore()\r\n\r\n        this.showScore()\r\n\r\n        this.addNewCellsToColumns()\r\n\r\n        this.updateCellsPositions()\r\n\r\n        this.renderNewCells()\r\n    }\r\n\r\n    findCell(colIndex, rowIndex) {\r\n        return this.columns[colIndex] && this.columns[colIndex].getCell(rowIndex)\r\n    }\r\n\r\n    markRoundCell(cell) {\r\n        if (cell.readyToBoom) return\r\n\r\n        cell.readyToBoom = true\r\n        this.readyToBoomCounter++\r\n\r\n        const {top, bottom, left, right} = this.findSibling(cell.col, cell.row)\r\n\r\n        if (top && top.color === this.currentColor) {\r\n            this.markRoundCell(top)\r\n        }\r\n        if (bottom && bottom.color === this.currentColor) {\r\n            this.markRoundCell(bottom)\r\n        }\r\n        if (left && left.color === this.currentColor) {\r\n            this.markRoundCell(left)\r\n        }\r\n        if (right && right.color === this.currentColor) {\r\n            this.markRoundCell(right)\r\n        }\r\n\r\n    }\r\n\r\n    isSingleCell(cell) {\r\n        const {top, bottom, left, right} = this.findSibling(cell.col, cell.row)\r\n\r\n        return (\r\n            (!top || top.color !== cell.color) &&\r\n            (!bottom || bottom.color !== cell.color) &&\r\n            (!left || left.color !== cell.color) &&\r\n            (!right || right.color !== cell.color)\r\n        )\r\n    }\r\n\r\n    findSibling(col, row) {\r\n        const top = this.findCell(col, row + 1)\r\n        const bottom = this.findCell(col, row - 1)\r\n        const left = this.findCell(col - 1, row)\r\n        const right = this.findCell(col + 1, row)\r\n\r\n        return {top, bottom, left, right}\r\n    }\r\n\r\n    removeMarkedRoundCells() {\r\n        this.columns.forEach(column => column.boomCells())\r\n\r\n        this.columns = this.columns.filter(column => {\r\n            if (!column.cells.length)\r\n                column.destroy()\r\n\r\n            return column.cells.length\r\n        })\r\n\r\n        this.currentColor = null\r\n\r\n        this.playFxSounds()\r\n    }\r\n\r\n    playFxSounds() {\r\n        const chance = Math.random() > .5\r\n        const fx = new Audio(chance ? boomSound1 : boomSound2)\r\n        fx.play()\r\n    }\r\n\r\n    calcScore() {\r\n        let scoreRate = 1\r\n        if (this.readyToBoomCounter > 5) {\r\n            scoreRate = 2\r\n        } else if (this.readyToBoomCounter > 10) {\r\n            scoreRate = 3\r\n        } else if (this.readyToBoomCounter > 20) {\r\n            scoreRate = 4\r\n        } else if (this.readyToBoomCounter > 30) {\r\n            scoreRate = 5\r\n        }\r\n\r\n        let score = this.readyToBoomCounter * scoreRate;\r\n\r\n        this.score += score\r\n        this.readyToBoomCounter = 0\r\n    }\r\n\r\n    showScore() {\r\n        this.scoreElm.innerText = `SCORE: ${this.score}`\r\n    }\r\n\r\n    addNewCellsToColumns() {\r\n        const newRow = this.generateNewRowColors();\r\n        for (let colIndex = 0; colIndex < this.initColumnsCount; colIndex++) {\r\n            if (!this.columns[colIndex]) {\r\n                this.columns[colIndex] = new Column()\r\n                this.boardElm.appendChild(this.columns[colIndex].elm)\r\n            }\r\n\r\n            const cell = new Cell({col: colIndex, row: 0}, newRow[colIndex])\r\n            this.columns[colIndex].addCell(cell)\r\n        }\r\n    }\r\n\r\n    renderNewCells() {\r\n        for (let column of this.columns) {\r\n            const newCell = column.getCell(0)\r\n            newCell.elm.addEventListener(\"click\", this.cellClick.bind(this, newCell))\r\n            column.elm.append(newCell.elm)\r\n        }\r\n    }\r\n\r\n    clearBoard() {\r\n        this.columns.forEach(column => {\r\n            column.cells.forEach(cell => cell.destroy())\r\n            this.playFxSounds()\r\n        })\r\n\r\n        this.msgElm.innerText = `Game Over :( \\nScore: ${this.score}`\r\n        this.scoreElm.innerText = 'Next round starting...'\r\n        this.columns = []\r\n        this.gameover = false\r\n        this.score = 0\r\n\r\n        setTimeout(() => {\r\n            this.start()\r\n        }, 5000)\r\n    }\r\n}\r\n","import Board from \"./libs/board\"\r\n\r\nconst boardElm = document.getElementById(\"board\")\r\nconst scoreElm = document.getElementById(\"score\")\r\nconst msgElm = document.getElementById(\"msg\")\r\n\r\nconst board = new Board(boardElm, scoreElm, msgElm);\r\n\r\nboard.start()\r\n"]}